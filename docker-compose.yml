version: '3.8'

services:
  mongodb:
    image: mongo:6.0.14
    container_name: mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USER:-mongoadmin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-changeme123}
      MONGO_INITDB_DATABASE: rezo_db
    volumes:
      - mongodb_data:/data/db
    networks:
      - backend
    healthcheck:
      test: >
        mongosh --quiet
        --username $$MONGO_INITDB_ROOT_USERNAME
        --password $$MONGO_INITDB_ROOT_PASSWORD
        --authenticationDatabase admin
        --eval "db.adminCommand('ping')"
      interval: 15s
      timeout: 30s
      retries: 6
      start_period: 60s
    ports:
      - "27017:27017"

  postgres:
    image: postgres:15.5-alpine
    container_name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme123}
      POSTGRES_DB: ${POSTGRES_DB:-rezo_db}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-rezo_db}"]
      interval: 10s
      timeout: 10s
      retries: 5
    ports:
      - "5432:5432"

  redis:
    image: redis:7.2-alpine
    container_name: redis
    restart: unless-stopped
    command: redis-server --save 60 1 --loglevel warning --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - backend
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    # Removed port mapping to avoid conflicts (containers access via internal network)
    # ports:
    #   - "6379:6379"

  app:
    build: .
    container_name: app
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      NODE_ENV: production
      PORT: 3000
      DATABASE_URL: ${DATABASE_URL}
      MONGODB_URI: ${MONGODB_URI}
      REDIS_URL: redis://redis:6379
    env_file:
      - .env
    ports:
      - "3000:3000"
    volumes:
      - ./:/app
      - /app/node_modules
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/server-health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  mongodb_data:
  postgres_data:
  redis_data:

networks:
  backend:
    driver: bridge