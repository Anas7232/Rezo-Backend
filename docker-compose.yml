version: '3.8'

services:
  mongodb:
    image: mongo:6.0.14
    container_name: mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
    volumes:
      - mongodb_data:/data/db
    networks:
      - backend
    healthcheck:
      test: >
        mongosh --quiet --authenticationDatabase admin -u ${MONGO_ROOT_USER} -p ${MONGO_ROOT_PASSWORD} --eval "db.adminCommand({ ping: 1 })"
      interval: 10s
      timeout: 5s
      retries: 5

  postgres:
    image: postgres:15.5-alpine
    container_name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_MAX_CONNECTIONS: 200
    command: ["postgres", "-c", "max_connections=200"]
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "5432:5432"

  redis:
    image: redis:7.2-alpine
    container_name: redis
    restart: unless-stopped
    command: ["redis-server", "--save 60 1", "--loglevel warning", "--appendonly yes"]
    volumes:
      - redis_data:/data
    networks:
      - backend
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  app:
    build: .
    container_name: app
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - NODE_ENV=production
      - PORT=${APP_PORT:-3000}
      - DATABASE_URL=postgresql://postgres:changeme123@postgres:5432/rezo_db?schema=public&connection_limit=20&pool_timeout=10
      - MONGODB_URI=mongodb://${MONGO_ROOT_USER}:${MONGO_ROOT_PASSWORD}@mongodb:27017
      - REDIS_URL=redis://redis:6379
    env_file:
      - .env
    ports:
      - "${APP_PORT:-3000}:${APP_PORT:-3000}"
    volumes:
      - ./logs:/app/logs
      - ./src:/app/src
      - ./node_modules:/app/node_modules
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:${APP_PORT:-3000}/server-health || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3

volumes:
  mongodb_data:
  postgres_data:
  redis_data:

networks:
  backend:
    driver: bridge


