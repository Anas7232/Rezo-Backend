version: '3.8'

services:
  mongodb:
    image: mongo:6.0.14
    container_name: mongodb
    restart: unless-stopped
    env_file:
      - .env
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: admin
    volumes:
      - mongodb_data:/data/db
    networks:
      - backend
    healthcheck:
      test: >
        mongosh --eval "db.runCommand({ ping: 1 })" -u $$MONGO_ROOT_USER -p $$MONGO_ROOT_PASSWORD --authenticationDatabase admin --quiet
      interval: 15s
      timeout: 10s
      retries: 6
      start_period: 30s
    ports:
      - "27017:27017"
    command: --bind_ip_all --auth
    ulimits:
      nofile:
        soft: 64000
        hard: 64000

  postgres:
    image: postgres:15.5-alpine
    container_name: postgres
    restart: unless-stopped
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s
    ports:
      - "5432:5432"
    command: [
      "postgres",
      "-c", "max_connections=500",
      "-c", "shared_buffers=256MB",
      "-c", "work_mem=4MB",
      "-c", "maintenance_work_mem=64MB",
      "-c", "effective_cache_size=768MB"
    ]

  pgbouncer:
    image: edoburu/pgbouncer
    container_name: pgbouncer
    restart: unless-stopped
    ports:
      - "6432:6432"
    environment:
      DB_USER: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${POSTGRES_DB}
      POOL_MODE: transaction
      MAX_CLIENT_CONN: 2000
      DEFAULT_POOL_SIZE: 50
      RESERVE_POOL_SIZE: 10
      RESERVE_POOL_TIMEOUT: 5
      SERVER_RESET_QUERY: DISCARD ALL
    depends_on:
      - postgres
    networks:
      - backend

  redis:
    image: redis:7.2-alpine
    container_name: redis
    restart: unless-stopped
    command: redis-server --save 60 1 --loglevel warning --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - backend
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "6379:6379"

  app:
    build: .
    container_name: app
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      pgbouncer:
        condition: service_started
    env_file:
      - .env
    environment:
      NODE_ENV: production
      PORT: 3000
      REDIS_URL: redis://redis:6379
      MONGODB_URI: ${MONGODB_URI}
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@pgbouncer:6432/${POSTGRES_DB}
    ports:
      - "3000:3000"
    volumes:
      - ./logs:/app/logs
      - /app/node_modules
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/server-health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

volumes:
  mongodb_data:
  postgres_data:
  redis_data:

networks:
  backend:
    driver: bridge
